Dump of assembler code for function fibonacci:

   0x00005555555546ca <+0>:	push   %rbp
   0x00005555555546cb <+1>:	mov    %rsp,%rbp
   0x00005555555546ce <+4>:	sub    $0x20,%rsp
   0x00005555555546d2 <+8>:	mov    %edi,-0x14(%rbp)
   0x00005555555546d5 <+11>:	movl   $0x0,-0x10(%rbp)
   0x00005555555546dc <+18>:	movl   $0x1,-0xc(%rbp)
   0x00005555555546e3 <+25>:	cmpl   $0x0,-0x14(%rbp)
   0x00005555555546e7 <+29>:	jle    0x55555555478f <fibonacci+197>
   0x00005555555546ed <+35>:	cmpl   $0x1,-0x14(%rbp)
   0x00005555555546f1 <+39>:	jne    0x55555555470e <fibonacci+68>
   0x00005555555546f3 <+41>:	mov    -0x10(%rbp),%eax
   0x00005555555546f6 <+44>:	mov    %eax,%esi
   0x00005555555546f8 <+46>:	lea    0x179(%rip),%rdi        # 0x555555554878
   0x00005555555546ff <+53>:	mov    $0x0,%eax
   0x0000555555554704 <+58>:	callq  0x555555554590 <printf@plt>
   0x0000555555554709 <+63>:	jmpq   0x555555554790 <fibonacci+198>
   0x000055555555470e <+68>:	cmpl   $0x2,-0x14(%rbp)
   0x0000555555554712 <+72>:	jne    0x55555555472f <fibonacci+101>
   0x0000555555554714 <+74>:	mov    -0xc(%rbp),%edx
   0x0000555555554717 <+77>:	mov    -0x10(%rbp),%eax
   0x000055555555471a <+80>:	mov    %eax,%esi
   0x000055555555471c <+82>:	lea    0x159(%rip),%rdi        # 0x55555555487c
   0x0000555555554723 <+89>:	mov    $0x0,%eax
   0x0000555555554728 <+94>:	callq  0x555555554590 <printf@plt>
   0x000055555555472d <+99>:	jmp    0x555555554790 <fibonacci+198>
   0x000055555555472f <+101>:	mov    -0xc(%rbp),%edx
   0x0000555555554732 <+104>:	mov    -0x10(%rbp),%eax
   0x0000555555554735 <+107>:	mov    %eax,%esi
   0x0000555555554737 <+109>:	lea    0x13e(%rip),%rdi        # 0x55555555487c
   0x000055555555473e <+116>:	mov    $0x0,%eax
   0x0000555555554743 <+121>:	callq  0x555555554590 <printf@plt>
   0x0000555555554748 <+126>:	movl   $0x1,-0x8(%rbp)
   0x000055555555474f <+133>:	jmp    0x555555554782 <fibonacci+184>
   0x0000555555554751 <+135>:	mov    -0x10(%rbp),%edx
   0x0000555555554754 <+138>:	mov    -0xc(%rbp),%eax
   0x0000555555554757 <+141>:	add    %edx,%eax
   0x0000555555554759 <+143>:	mov    %eax,-0x4(%rbp)
   0x000055555555475c <+146>:	mov    -0x4(%rbp),%eax
   0x000055555555475f <+149>:	mov    %eax,%esi
   0x0000555555554761 <+151>:	lea    0x110(%rip),%rdi        # 0x555555554878
   0x0000555555554768 <+158>:	mov    $0x0,%eax
   0x000055555555476d <+163>:	callq  0x555555554590 <printf@plt>
   0x0000555555554772 <+168>:	mov    -0xc(%rbp),%eax
   0x0000555555554775 <+171>:	mov    %eax,-0x10(%rbp)
   0x0000555555554778 <+174>:	mov    -0x4(%rbp),%eax
   0x000055555555477b <+177>:	mov    %eax,-0xc(%rbp)
   0x000055555555477e <+180>:	addl   $0x1,-0x8(%rbp)
   0x0000555555554782 <+184>:	mov    -0x14(%rbp),%eax
   0x0000555555554785 <+187>:	sub    $0x2,%eax
   0x0000555555554788 <+190>:	cmp    %eax,-0x8(%rbp)
   0x000055555555478b <+193>:	jle    0x555555554751 <fibonacci+135>
   0x000055555555478d <+195>:	jmp    0x555555554790 <fibonacci+198>
   0x000055555555478f <+197>:	nop
   0x0000555555554790 <+198>:	leaveq 
   0x0000555555554791 <+199>:	retq   

End of assembler dump.

